program ::= main
main ::= "function" "main" "(" ")" "{" stmtlist "}" functionlist
functionlist ::= function*
function ::= "function" identifier "(" paramlist ")" "{" stmtlist "}"
paramlist ::= param | param "," paramlist | É›
param ::= identifier | num

stmtlist ::= stmt*
stmt ::= assign_val | assign_func_call | if | while | sequence | returnStmt | array_create | array_assign

assign_val ::= identifier "=" expr ";"
assign_func_call ::= identifier "=" "call" identifier "(" [paramlist] ")" ";"
array_create ::= identifier "=" "new" "array" "(" arithExpr ")" ";" 
array_assign ::= identifier "[" arithExpr "]"  "=" expr ";"

if ::= "if" "(" expr ")" stmt "else" stmt
while ::= "while" "(" expr ")" stmt
sequence ::= "{" stmtlist "}"
returnStmt ::= "return" expr ";"

expr ::= arithExpr | boolExpr |  identifier "[" arithExpr "]" | identifier "[" "]"
arithExpr ::= arithExpr op arithExpr| noprnd
boolExpr ::= boolExpr rop boolExpr| boprnd
noprnd ::= var | num | negnum
boprnd ::= var | "True" | "False"
op ::= "+" | "-" | "*" | "/"
rop ::= "<" | ">" | "==" | "!=" | ">=" | "<=" | "and" | "or"

var ::= identifier
funcCall ::= identifier
num ::= digit+ | 
negnum ::= "-"digit+

identifier ::= letter (letter | digit)*
letter ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z"
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 